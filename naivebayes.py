# -*- coding: utf-8 -*-
"""NaiveBayes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zYszmIopv85agD6_BSxk8WKMF3d2MZwJ
"""

import pandas as pd
from pandas import DataFrame
df_golf_data = pd.read_csv("/content/weather.csv", index_col=0)

df_golf_data

attr_names = list(df_golf_data.columns)
attr_names.remove('play')
attr_names

table = dict()
prior_prob = dict()

train = df_golf_data.sample(frac = 0.8, random_state = 100) #80% fr training
train

test=df_golf_data.drop(train.index)
#test

print(df_golf_data.shape)
print(train.shape)
print(test.shape)

df_golf_data.info()

for attr_val, data_subset in train.groupby('play'):
  #print(attr_val)
  #print(data_subset)
  from collections import Counter
  valueCount = dict()
  Count = 0
  for val_attr in attr_names:
    #print(val_attr)
    cnt = Counter(x for x in data_subset[val_attr])
    Count = sum(cnt.values())
    #print(cnt)
    #print(Count)
    valueCount[val_attr] = dict(cnt)
    #print("Value Count : ", valueCount.values())
    #print("Counter : ", cnt)
    print(valueCount)
  table[attr_val] = valueCount
  prior_prob[attr_val] = Count

from pprint import pprint
print("Resultant table is : \n")
pprint(table)
pprint(prior_prob)

total_size = test['play'].count()
correct_prediction = 0
for k, row in test.iterrows():
  #print(k)
  #print(row)
  row_tuple = dict(row)
  #print(row_tuple)
  posteriorList = list()
  labelList = list()
  for label in table.keys():
    posterior = 1.0
    for key in [x for x in row_tuple.keys() if x!= 'play']:
      #print(key,row_tuple['play'])
      attribute_value = row_tuple.get(key)
      if attribute_value in table[label][key].keys():
        countList = table[label][key].values()
        attribute_count = table[label][key][attribute_value]
        posterior = 1.0 * attribute_count/sum(countList) * posterior
    posterior = posterior * prior_prob[label]
    labelList.append(label)
    posteriorList.append(posterior)
    print("LabelList : " ,labelList)
    print("PosteriorList : ", posteriorList)
  maxprob = posteriorList.index(max(posteriorList))
  print(row_tuple['play'], ";;;;;;;", labelList[maxprob])
  if row_tuple['play'] == labelList[maxprob]:
    correct_prediction += 1
    #print(row_tuple['play'], ";;;;;;", labelList[maxprob])
    print("Label : ", label,"Posterior : ",  posterior)
print("Correct predictions, Total Predictions : ", correct_prediction, total_size)
print("Accuracy Score : " , 100*correct_prediction/total_size)

