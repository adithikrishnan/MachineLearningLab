# -*- coding: utf-8 -*-
"""ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PXNlfw8L8b88HJABGBAHo0ngnwWVEB6Q
"""

#ANN implementation

import numpy as np

def reweight_level2():
  derivative_of_error = output[0]-estimated_output[0]
  w2[0][0] = w2[0][0] + 0.002*(derivative_of_error*hidden_output[0])
  w2[1][0] = w2[1][0] + 0.002*(derivative_of_error*hidden_output[1]) #to update weight, formula is w = w + N*derivate of etotal/w

def reweight_level1():
  w1[0][0] = w1[0][0] + 0.002*(x[0]*hidden_output[0]*w2[0][0])
  w1[0][1] = w1[0][1] + 0.002*(x[0]*hidden_output[1]*w2[1][0])
  w1[1][0] = w1[1][0] + 0.002*(x[1]*hidden_output[0]*w2[0][0])
  w1[1][1] = w1[1][1] + 0.002*(x[1]*hidden_output[1]*w2[1][0])

def reupdate(a):
  i=0
  b = [None]*len(a)
  for x in a:
    a[i] = np.maximum(0,x)
    i += 1
  print(w1)
  return a

w1 = [[0.7, 0.5], [0.9, 0.7]]
w2 = [[0.5], [0.6]]

x=[2,5]
output=[1]

for i in range(10):
  hidden_input = np.matmul(w1,x)
  hidden_output = reupdate(hidden_input)
  print("hidden_output\n", hidden_output)
  estimated_output = np.matmul(hidden_output, w2)
  print("estimated_output\n", estimated_output)
  print("error:", estimated_output-output)
  reweight_level2()
  reweight_level1()

#EXTRA WORK! :P

import pandas as pd
import numpy as np

# Generate some test data with a trend.

data = pd.DataFrame(
    {
        'year': list(range(1900, 2000)),
        'life_exp': np.linspace(50, 80, 100) * ((np.random.randn(100, ) * 0.1) + 1)
    }
)

data[['life_exp']].plot()

coef = np.polyfit(data['year'], data['life_exp'], 1)

# Generate predictions for entire series.

data['predicted'] = pd.Series(np.polyval(coef, data['year']))

data[['life_exp', 'predicted']].plot()

x = 1981

print('Predicted life expectancy for {}: {:.2f} years'.format(x, np.polyval(coef, x)))

